====================================
Getting started
====================================


How to use the benchmark aka how to evaluate your own sampler



Installation
============

.. code-block:: bash

    $ pip install requirement.txt

**TODO not available file right now**


Sampler architecture
====================

The sampler you want to evaluate in this benchmark must follow this architecture, implementing the fit and select samples method :

 .. code-block:: bash

    class MyCustomSamplerClass():
        """Abstract Base Class handling query samplers relying on a total order.
        Query sampling methods often scores all the samples and then pick samples
        using these scores. This base class handles the selection system, only
        a scoring method is then required.
        Args:
            batch_size: Numbers of samples to select.
            strategy: Describes how to select the samples based on scores.
            random_state: Random seeding
        """
        def __init__(self, batch_size: int, strategy: str = 'top',
                    random_state: RandomStateType = None):


        def fit(self, X: np.ndarray, y: np.ndarray = None):
            """Fit the model on labeled samples.
            Args:
                X: Labeled samples of shape (n_samples, n_features).
                y: Labels of shape (n_samples).
            
            Returns:
                The object itself
            """
            
            # do some stuff

            return self


        def select_samples(self, X: np.array) -> np.array:
            """Selects the samples from unlabeled data using the internal scoring.
            Args:
                X: Pool of unlabeled samples of shape (n_samples, n_features).
                strategy: Strategy to use to select queries. 
            Returns:
                Indices of the selected samples of shape (batch_size).
            """

            # do some stuff

            return index


Don't forget to import your MyCustomSamplerClass inside the main *run.py* script:

.. code-block:: bash

    from my_file.py import MyCustomSamplerClass


Insertion inside benchmark
==========================

In order to add your sampler inside the main script you should import your model in the main script (as described previously) and specify your model parameters inside the *methods* dictionnary as follow:

.. code-block:: bash

    methods = {
        # other benchmark samplers
        'sampler_name': lambda params: MyCustomSamplerClass(batch_size=params['batch_size'], *your sampler params*),
        }

Classifier
----------

If your method requires a classifier, please add a classifier attribute with ``classifier = params['clf']``.

The appropriate classifier will be selected according to the corresponding dataset evaluated.

Random state
------------

As soon as you can, please add a random_state attribute with ``random_state=int(seed)`` in order to improve reproducibility of your method over tested seed
